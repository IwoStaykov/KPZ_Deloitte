import React, { useEffect, useRef, useState } from 'react';
import { PromptDetailProps } from '../types/interfaces';
import DiffEditor, { DiffMethod } from 'react-diff-viewer-continued';

const PromptDetail: React.FC<PromptDetailProps> = ({
                                                       isOpen, onClose, title, tags, description, author, date, usageCount,
                                                       promptContent, history = [], onEdit,
                                                       onDelete, selectedPrompt, currentUserId 
                                                   }) => {
    const [selectedVersion, setSelectedVersion] = useState<number | null>(null);
    const [isHistoryOpen, setIsHistoryOpen] = useState(false);
    const historyMenuRef = useRef<HTMLDivElement>(null);
    const [isCompareMode, setIsCompareMode] = useState(false);
    const [oldContent, setOldContent] = useState('');
    const [newContent, setNewContent] = useState('');
    const [context, setContext] = useState('');
    const [isChatOpen, setIsChatOpen] = useState(false);
    const [chatMessages, setChatMessages] = useState<Array<{type: 'system' | 'user' | 'bot', content: string}>>([]);
    const [userMessage, setUserMessage] = useState('');
    const isOwner = selectedPrompt && currentUserId && selectedPrompt.authorId === currentUserId;

    useEffect(() => {
        if (selectedVersion !== null && history) {
            const selected = history.find(item => item.version === selectedVersion)?.content || '';
            const next = history.find(item => item.version === selectedVersion + 1)?.content || promptContent;
            setOldContent(selected);
            setNewContent(next);
        }
    }, [selectedVersion, history, promptContent]);

    useEffect(() => {
        // Inicjalizacja wiadomości systemowej po otwarciu chatu
        if (isChatOpen && chatMessages.length === 0) {
            setChatMessages([
                {
                    type: 'system',
                    content: 'New conversation started using the prompt.'
                }
            ]);
        }
    }, [isChatOpen, chatMessages.length]);

    // Obsługa kliknięcia poza menu historii, aby je zamknąć
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (historyMenuRef.current && !historyMenuRef.current.contains(event.target as Node)) {
                setIsHistoryOpen(false);
            }
        };

        if (isHistoryOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isHistoryOpen]);

    const handleSendMessage = () => {
        if (!userMessage.trim()) return;

        // Dodaj wiadomość użytkownika
        setChatMessages(prev => [...prev, { type: 'user', content: userMessage }]);

        // Symulacja odpowiedzi bota (w rzeczywistości byłoby zapytanie do Bedrock)
        setTimeout(() => {
            setChatMessages(prev => [
                ...prev,
                {
                    type: 'bot',
                    content: `This is a simulated response to: "${userMessage}". In a real implementation, this text would be generated by Bedrock AI based on the prompt and context.`
                }
            ]);
        }, 1000);

        setUserMessage('');
    };

    if (!isOpen) return null;

    const displayContent = selectedVersion !== null && history
        ? history.find(item => item.version === selectedVersion)?.content || promptContent
        : promptContent;

    return (
        <div className={`prompt-detail-view ${isChatOpen ? 'with-chat-open' : ''}`}>
            <div className="prompt-detail-header">
                <h2>{title}</h2>
                <button className="btn close-btn" onClick={onClose}>
                    <i className="bi bi-x-lg"></i>
                </button>
            </div>

            <div className="tags-container prompt-tags">
                {tags.map((tag, index) => (
                    <span key={index} className={`badge ${index % 2 === 0 ? 'badge-primary' : 'badge-accent'}`}>{tag}</span>
                ))}
            </div>

            <div className="prompt-info">
                <p><strong>Description:</strong> {description}</p>
                <p><strong>Created by:</strong> {author}</p>
                <p><strong>Last updated:</strong> {new Date(date).toLocaleString("en-US", {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                })}
                </p>
                <p><strong>Usage count:</strong> {usageCount.toLocaleString()}</p>
            </div>

            <div className="prompt-content-section">
                <div className="prompt-header">
                    <h4>Prompt:</h4>
                    {selectedVersion !== null && history && (
                        <button
                            className={`btn compare-btn ${isCompareMode ? 'active' : ''}`}
                            onClick={() => setIsCompareMode(!isCompareMode)}
                            disabled={selectedVersion === history.length}
                        >
                            <i className={`bi ${isCompareMode ? 'bi-code-slash' : 'bi-git'}`}></i>
                            {isCompareMode ? 'Pokaż wybraną wersję' : 'Pokaż zmiany'}
                        </button>
                    )}
                </div>

                <div className="prompt-content-box">
                    {isCompareMode ? (
                        <DiffEditor
                            oldValue={oldContent}
                            newValue={newContent}
                            splitView
                            useDarkTheme={document.body.getAttribute('data-theme') === 'dark'}
                            disableWordDiff={false}
                            showDiffOnly={false}
                            extraLinesSurroundingDiff={3}
                            compareMethod={DiffMethod.WORDS}
                            styles={{ contentText: { fontFamily: 'Consolas, Monaco, monospace', fontSize: '0.85rem' } }}
                        />
                    ) : (
                        displayContent
                    )}
                </div>
            </div>

            {/* Nowa sekcja kontekstu */}
            <div className="prompt-content-section">
                <div className="prompt-header">
                    <h4>Context:</h4>
                </div>
                <div className="prompt-content-box" style={{ minHeight: '200px', height: 'auto' }}>
    <textarea
        className="prompt-content-box"
        style={{
            width: '100%',
            height: '100%',
            border: 'none',
            background: 'transparent',
            resize: 'none',
            outline: 'none'
        }}
        value={context}
        onChange={(e) => setContext(e.target.value)}
        placeholder="Enter context for the prompt..."
    ></textarea>
                </div>
            </div>

            <div className="prompt-actions">
                {history?.length >= 0 && (
                    <div className="history-dropdown">
                        <button
                            className="btn history-btn"
                            onClick={() => setIsHistoryOpen(!isHistoryOpen)}
                        >
                            <i className="bi bi-clock-history"></i>
                            {selectedVersion !== null
                                ? `Version  ${selectedVersion}`
                                : 'Current Version'}
                        </button>

                        {isHistoryOpen && (
                            <div className="history-menu" ref={historyMenuRef}>
                                <div className={`history-item ${selectedVersion === null ? 'active' : ''}`} onClick={() => setSelectedVersion(null)}>
                                    <span>Current Version</span><span>{date}</span>
                                </div>
                                {history.slice().reverse().map(item => (
                                    <div
                                        key={item.version}
                                        className={`history-item ${selectedVersion === item.version ? 'active' : ''}`}
                                        onClick={() => setSelectedVersion(item.version)}
                                    >
                                        <span>Version {item.version}</span>
                                        <span>{new Date(item.date).toLocaleDateString("pl-PL", {
                                            year: 'numeric',
                                            month: 'short',
                                            day: 'numeric'
                                        })}</span>
                                        <small>{item.changes}</small>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )}
                <div className="action-buttons">
                    <button className="btn copy-btn" onClick={() => navigator.clipboard.writeText(promptContent)}>
                        <i className="bi bi-clipboard"></i> Copy
                    </button>
                    {isOwner && (
                        <button className="btn edit-btn" onClick={onEdit}>
                            <i className="bi bi-pencil"></i> Edit
                        </button>
                    )}
                    {isOwner && (    
                        <button
                            className="btn delete-btn"
                            onClick={() => onDelete(selectedPrompt.id)}
                        >
                            <i className="bi bi-trash"></i> Delete
                        </button>
                    )}    
                    <button
                        className="btn use-btn"
                        onClick={() => setIsChatOpen(true)}
                    >
                        <i className="bi bi-chat-text"></i> Use This Prompt
                    </button>
                </div>
            </div>

            {/* Panel chatu */}
            {isChatOpen && (
                <div className="chat-panel">
                    <div className="chat-header">
                        <h3>Konwersacja z Bedrock</h3>
                        <button className="btn close-btn" onClick={() => setIsChatOpen(false)}>
                            <i className="bi bi-x-lg"></i>
                        </button>
                    </div>
                    <div className="chat-messages">
                        <div className="message system-message">
                            <div className="message-content">
                                Rozpoczęta nowa konwersacja z wykorzystaniem:
                                <div className="prompt-info-snippet">
                                    <strong>Prompt:</strong> {promptContent.length > 100
                                    ? promptContent.substring(0, 100) + '...'
                                    : promptContent}
                                    {context && (
                                        <>
                                            <br />
                                            <strong>Context:</strong> {context.length > 100
                                            ? context.substring(0, 100) + '...'
                                            : context}
                                        </>
                                    )}
                                </div>
                            </div>
                        </div>

                        {chatMessages.filter(msg => msg.type !== 'system').map((message, index) => (
                            <div
                                key={index}
                                className={`message ${message.type === 'user' ? 'user-message' : 'bot-message'}`}
                            >
                                <div className="message-content">{message.content}</div>
                            </div>
                        ))}
                    </div>
                    <div className="chat-input-area">
                        <textarea
                            className="chat-input"
                            placeholder="Write a message..."
                            value={userMessage}
                            onChange={(e) => setUserMessage(e.target.value)}
                            onKeyDown={(e) => {
                                if (e.key === 'Enter' && !e.shiftKey) {
                                    e.preventDefault();
                                    handleSendMessage();
                                }
                            }}
                        ></textarea>
                        <button className="btn send-btn" onClick={handleSendMessage}>
                            <i className="bi bi-arrow-right"></i>
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default PromptDetail;